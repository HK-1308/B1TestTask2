// <auto-generated />
using B1TestTask2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B1TestTask2.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220804110046_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("B1TestTask2.Data.Models.BalanceАccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BalacnceAccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("FileId");

                    b.ToTable("BalanceАccounts");
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Денежные средства, драгоценные металлы и межбанковские операции"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Кредитные и иные активные операции с клиентами"
                        },
                        new
                        {
                            Id = "3",
                            Name = " Счета по операциям клиентов"
                        },
                        new
                        {
                            Id = "4",
                            Name = " Ценные бумаги"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Долгосрочные финансовые вложения в уставные фонды юридических лиц, основные средства и прочее имущество"
                        },
                        new
                        {
                            Id = "6",
                            Name = " Прочие активы и прочие пассивы"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Собственный капитал банка"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Доходы банка"
                        },
                        new
                        {
                            Id = "9",
                            Name = "Расходы банка"
                        });
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.FileXlsx", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.IncomingBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Active")
                        .HasColumnType("TEXT");

                    b.Property<string>("BalanceAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Passive")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BalanceAccountId")
                        .IsUnique();

                    b.ToTable("IncomingBalances");
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.Turnover", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BalanceAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Credit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Debit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BalanceAccountId")
                        .IsUnique();

                    b.ToTable("Turnovers");
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.BalanceАccount", b =>
                {
                    b.HasOne("B1TestTask2.Data.Models.Class", "Class")
                        .WithMany("BalanceАccounts")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B1TestTask2.Data.Models.FileXlsx", "File")
                        .WithMany("BalanceАccounts")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("File");
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.IncomingBalance", b =>
                {
                    b.HasOne("B1TestTask2.Data.Models.BalanceАccount", "BalanceAccount")
                        .WithOne("IncomingBalance")
                        .HasForeignKey("B1TestTask2.Data.Models.IncomingBalance", "BalanceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BalanceAccount");
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.Turnover", b =>
                {
                    b.HasOne("B1TestTask2.Data.Models.BalanceАccount", "BalanceAccount")
                        .WithOne("Turnover")
                        .HasForeignKey("B1TestTask2.Data.Models.Turnover", "BalanceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BalanceAccount");
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.BalanceАccount", b =>
                {
                    b.Navigation("IncomingBalance")
                        .IsRequired();

                    b.Navigation("Turnover")
                        .IsRequired();
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.Class", b =>
                {
                    b.Navigation("BalanceАccounts");
                });

            modelBuilder.Entity("B1TestTask2.Data.Models.FileXlsx", b =>
                {
                    b.Navigation("BalanceАccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
